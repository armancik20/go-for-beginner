swagger: "2.0"
info:
  title: Indra beego API
  description: This is my research about how to make documentation in beego
  version: 1.0.0
  termsOfService: https://indraoctama.com/
  contact:
    email: omyank2007i@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /user/{uid}:
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/add:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: form
        name: username
        description: The username for signup
        required: true
        type: string
      - in: form
        name: password
        description: The password for signup
        required: true
        type: string
      responses:
        "200":
          description: '{ "status": 1, "message": "Success", "data": { "id_user":
            4 } }'
  /user/get/{username}:
    get:
      tags:
      - user
      description: get user by username
      operationId: UserController.Get
      parameters:
      - in: path
        name: username
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: '{ "status": 1, "message": "Success", "offset": 0, "limit":
            0, "count": 1, "data": [ { "created_date": "2018-08-02 12:27:04", "status":
            "1", "updated_date": null, "username": "indrabeego" } ] }'
        "403":
          description: :username is empty
  /user/getall:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      parameters:
      - in: query
        name: filter[username]
        description: username
        type: string
      - in: query
        name: page
        description: page
        type: integer
        format: int64
      - in: query
        name: perpage
        description: perpage
        type: integer
        format: int64
      - in: query
        name: filter[status]
        description: status
        type: integer
        format: int64
      responses:
        "200":
          description: '{ "status": 1, "message": "Success", "offset": 0, "limit":
            25, "count": 2, "data": [ { "created_date": "2018-08-02 12:27:04", "status":
            "1", "updated_date": null, "username": "indrabeego" }, { "created_date":
            "2018-08-05 18:41:27", "status": "1", "updated_date": "2018-08-05 18:41:27",
            "username": "dewibeego" } ] } true  "body for user content"'
  /user/login:
    post:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: form
        name: username
        description: The username for login
        required: true
        type: string
      - in: form
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{ "message": "login success", "status": 1, "tokensting": "string"
            }'
        "401":
          description: Invalid method
        "403":
          description: '{ "message": "user not exist", "status": 0, "tokensting":
            "string" }'
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  .User:
    type: object
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
